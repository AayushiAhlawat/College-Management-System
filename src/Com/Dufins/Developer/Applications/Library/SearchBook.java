/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Com.Dufins.Developer.Applications.Library;

import Util.Util;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NITISH SRIVASTAVA
 */
public class SearchBook extends javax.swing.JPanel implements Printable {

    /**
     * Creates new form SearchBook
     */
    int flag = 0, flag1 = 0;
    Connection connection = null;
    private int from = 0;
    private int rowcount;

    public SearchBook() {
        initComponents();
        this.repaint();
        TxtBookID.setText("");
        TxtTitle.setText("");
        TxtAuthor.setText("");
        TxtKeyword.setText("");
        TxtBillNumber.setText("");
        ChkAll.setSelected(true);

        jTable1.getColumnModel().getColumn(0).setHeaderValue("Book ID");
        jTable1.getColumnModel().getColumn(1).setHeaderValue("Title");
        jTable1.getColumnModel().getColumn(2).setHeaderValue("Author");
        jTable1.getColumnModel().getColumn(3).setHeaderValue("Place");
        jTable1.getColumnModel().getColumn(4).setHeaderValue("Publisher");
        jTable1.getColumnModel().getColumn(5).setHeaderValue("Edition");
        jTable1.getColumnModel().getColumn(6).setHeaderValue("Publication Year");
        jTable1.getColumnModel().getColumn(7).setHeaderValue("Category");
        jTable1.getColumnModel().getColumn(8).setHeaderValue("Price");
        jTable1.getColumnModel().getColumn(9).setHeaderValue("Volume");
        jTable1.getColumnModel().getColumn(10).setHeaderValue("Bill Number");
        jTable1.getColumnModel().getColumn(11).setHeaderValue("Bill Date");
        jTable1.getColumnModel().getColumn(12).setHeaderValue("ISBN Number");
        jTable1.getColumnModel().getColumn(13).setHeaderValue("Keyword");
        jTable1.getColumnModel().getColumn(14).setHeaderValue("Last Issued(MemID)");
        jTable1.getTableHeader().resizeAndRepaint();

        // Removing Previous Data
        clearTable();

        try {
            connection = Util.getConnection();
            Statement stmtcount = connection.createStatement();
            ResultSet rscount = stmtcount.executeQuery(" select count(Book_id) from bookmaster ");
            while (rscount.next()) {
                rowcount = rscount.getInt(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        TxtBookID = new javax.swing.JTextField();
        TxtBillNumber = new javax.swing.JTextField();
        TxtKeyword = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        TxtAuthor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabelid = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        TxtTitle = new javax.swing.JTextField();
        CmdSearch = new javax.swing.JLabel();
        CmdClear = new javax.swing.JLabel();
        CmdPrint = new javax.swing.JLabel();
        Export2Excel = new javax.swing.JLabel();
        ChkAll = new javax.swing.JRadioButton();
        ChkAvail = new javax.swing.JRadioButton();
        ChkNotAvail = new javax.swing.JRadioButton();
        ChkIssued = new javax.swing.JRadioButton();
        ChkNonIssued = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        IndexFirst = new javax.swing.JLabel();
        IndexPrvs = new javax.swing.JLabel();
        IndexNext = new javax.swing.JLabel();
        IndexLast = new javax.swing.JLabel();
        lblcBook = new javax.swing.JLabel();
        lblMemname = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14", "Title 15"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jScrollPane1.getViewport().setBackground(Color.WHITE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        TxtBookID.setText("jTextField1");
        TxtBookID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtBookIDKeyReleased(evt);
            }
        });

        TxtBillNumber.setText("jTextField1");
        TxtBillNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtBillNumberKeyReleased(evt);
            }
        });

        TxtKeyword.setText("jTextField1");
        TxtKeyword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtKeywordKeyReleased(evt);
            }
        });

        jLabel2.setText("Bill Number:");

        jLabel4.setText("Keyword :");

        TxtAuthor.setText("jTextField1");
        TxtAuthor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtAuthorKeyReleased(evt);
            }
        });

        jLabel3.setText("Title:");

        jLabelid.setText("Searh by Book ID:");

        jLabel1.setText("Author:");

        TxtTitle.setText("jTextField1");
        TxtTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtTitleKeyReleased(evt);
            }
        });

        CmdSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/search-icon.png"))); // NOI18N
        CmdSearch.setToolTipText("Search");
        CmdSearch.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CmdSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CmdSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CmdSearchMouseClicked(evt);
            }
        });

        CmdClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/edit-clear-3.png"))); // NOI18N
        CmdClear.setToolTipText("Clear");
        CmdClear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CmdClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CmdClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CmdClearMouseClicked(evt);
            }
        });

        CmdPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/print_icon.png"))); // NOI18N
        CmdPrint.setToolTipText("Print");
        CmdPrint.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CmdPrint.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CmdPrint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CmdPrintMouseClicked(evt);
            }
        });

        Export2Excel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/table_excel.png"))); // NOI18N
        Export2Excel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Export2Excel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Export2Excel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Export2ExcelMouseClicked(evt);
            }
        });

        ChkAll.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(ChkAll);
        ChkAll.setText("All");
        ChkAll.setToolTipText("Shows all books (Available, not available, issued)");
        ChkAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkAllActionPerformed(evt);
            }
        });

        ChkAvail.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(ChkAvail);
        ChkAvail.setText("Available");
        ChkAvail.setToolTipText("Shows available books in library");
        ChkAvail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkAvailActionPerformed(evt);
            }
        });

        ChkNotAvail.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(ChkNotAvail);
        ChkNotAvail.setText("Not Available");
        ChkNotAvail.setToolTipText("Shows damaged books");
        ChkNotAvail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkNotAvailActionPerformed(evt);
            }
        });

        ChkIssued.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(ChkIssued);
        ChkIssued.setText("Issued");
        ChkIssued.setToolTipText("Shows issued books");
        ChkIssued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkIssuedActionPerformed(evt);
            }
        });

        ChkNonIssued.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(ChkNonIssued);
        ChkNonIssued.setText("Non-Issued");
        ChkNonIssued.setToolTipText("Shows non-issued books");
        ChkNonIssued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkNonIssuedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelid)
                        .addGap(10, 10, 10)
                        .addComponent(TxtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel3)
                        .addGap(10, 10, 10)
                        .addComponent(TxtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(TxtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(10, 10, 10)
                                .addComponent(TxtBillNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel4)
                                .addGap(4, 4, 4)
                                .addComponent(TxtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ChkAll)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ChkAvail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ChkNonIssued)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ChkIssued)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ChkNotAvail)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CmdSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CmdClear, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CmdPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Export2Excel)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TxtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelid)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TxtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(12, 12, 12))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(12, 12, 12))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(TxtBillNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(9, 9, 9)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ChkAll)
                                    .addComponent(ChkAvail)
                                    .addComponent(ChkNotAvail)
                                    .addComponent(ChkIssued)
                                    .addComponent(ChkNonIssued)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(CmdPrint)
                                .addComponent(Export2Excel)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CmdSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CmdClear, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/nilaicon.png"))); // NOI18N

        IndexFirst.setBackground(new java.awt.Color(255, 255, 255));
        IndexFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/First_1.png"))); // NOI18N
        IndexFirst.setToolTipText("First Index");
        IndexFirst.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        IndexFirst.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        IndexFirst.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IndexFirstMouseClicked(evt);
            }
        });

        IndexPrvs.setBackground(new java.awt.Color(255, 255, 255));
        IndexPrvs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/prev_1.png"))); // NOI18N
        IndexPrvs.setToolTipText("Previous Index");
        IndexPrvs.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        IndexPrvs.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        IndexPrvs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IndexPrvsMouseClicked(evt);
            }
        });

        IndexNext.setBackground(new java.awt.Color(255, 255, 255));
        IndexNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/next_1.png"))); // NOI18N
        IndexNext.setToolTipText("Next Index");
        IndexNext.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        IndexNext.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        IndexNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IndexNextMouseClicked(evt);
            }
        });

        IndexLast.setBackground(new java.awt.Color(255, 255, 255));
        IndexLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/last_1.png"))); // NOI18N
        IndexLast.setToolTipText("Last Index");
        IndexLast.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        IndexLast.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        IndexLast.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IndexLastMouseClicked(evt);
            }
        });

        lblcBook.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblcBook.setForeground(new java.awt.Color(0, 153, 0));

        lblMemname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMemname.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(IndexFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IndexPrvs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IndexNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IndexLast)
                        .addGap(18, 18, 18)
                        .addComponent(lblcBook, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblMemname, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(2, 2, 2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(IndexFirst)
                        .addComponent(IndexPrvs)
                        .addComponent(IndexNext)
                        .addComponent(IndexLast))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblMemname, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblcBook, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void retBook() {
        flag = 0;
        try {


            connection = Util.getConnection();
            ResultSet rs;

            String StrQr = "";
            String filter = "";


            if (ChkAvail.isSelected()) {
                filter = " status IN ('Available','Issued','Issuing','Receiving') ";
            } else if (ChkNonIssued.isSelected()) {
                filter = " status = 'Available' ";
            } else if (ChkIssued.isSelected()) {
                filter = " status IN ('Issued','Issuing','Receiving') ";
            } else if (ChkNotAvail.isSelected()) {
                filter = " status = 'Not Available' ";
            } else if (ChkAll.isSelected()) {
                filter = " status IN ('Available','Issued','Issuing','Receiving', 'Not Available') ";
            }

            if (TxtBookID.getText().trim().length() > 0) {
                StrQr = StrQr + " and book_id = " + TxtBookID.getText().trim() + "";
                flag = 1;
            }
            if (TxtTitle.getText().trim().length() > 0) {
                StrQr = StrQr + " and title like '%" + TxtTitle.getText().trim() + "%'";
                flag = 1;
            }
            if (TxtAuthor.getText().trim().length() > 0) {
                StrQr = StrQr + " and author like '%" + TxtAuthor.getText().trim() + "%'";
                flag = 1;
            }
            if (TxtBillNumber.getText().trim().length() > 0) {
                StrQr = StrQr + " and billno like '%" + TxtBillNumber.getText().trim() + "%' ";
                flag = 1;
            }
            if (TxtKeyword.getText().trim().length() > 0) {
                StrQr = StrQr + " and keyword like '%" + TxtKeyword.getText().trim() + "%'";
                flag = 1;
            }


            if (flag == 1) {
                PreparedStatement stmt = connection.prepareStatement("select book_id, title, author, place, publisher, edition,publication_year, category, price, volume, billno, billdate, isbnno, Keyword, mem_id from bookmaster where " + filter + " " + StrQr + " order by book_id limit " + from + ", 50 ");
                rs = stmt.executeQuery();
            } else if (!filter.equals("")) {
                PreparedStatement stmt = connection.prepareStatement("select book_id, title, author, place, publisher, edition,publication_year, category, price, volume, billno, billdate, isbnno, Keyword, mem_id from bookmaster where " + filter + " order by book_id limit " + from + ", 50 ");
                rs = stmt.executeQuery();
            } else {
                PreparedStatement stmt = connection.prepareStatement("select book_id, title, author, place, publisher, edition,publication_year, category, price, volume, billno, billdate, isbnno, Keyword, mem_id from bookmaster order by book_id limit " + from + ", 50 ");
                rs = stmt.executeQuery();
            }

            // Removing Previous Data
            while (jTable1.getRowCount() > 0) {
                ((DefaultTableModel) jTable1.getModel()).removeRow(0);
            }

            //Creating Object []rowData for jTable's Table Model

            jTable1.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            // Coloumnautosizer.sizeColumnsToFit(jTable1);

            jTable1.getColumnModel().getColumn(0).setHeaderValue("Book ID");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Title");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Author");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("Place");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("Publisher");
            jTable1.getColumnModel().getColumn(5).setHeaderValue("Edition");
            jTable1.getColumnModel().getColumn(6).setHeaderValue("Publication Year");
            jTable1.getColumnModel().getColumn(7).setHeaderValue("Category");
            jTable1.getColumnModel().getColumn(8).setHeaderValue("Price");
            jTable1.getColumnModel().getColumn(9).setHeaderValue("Volume");
            jTable1.getColumnModel().getColumn(10).setHeaderValue("Bill Number");
            jTable1.getColumnModel().getColumn(11).setHeaderValue("Bill Date");
            jTable1.getColumnModel().getColumn(12).setHeaderValue("ISBN Number");
            jTable1.getColumnModel().getColumn(13).setHeaderValue("Keyword");
            jTable1.getColumnModel().getColumn(14).setHeaderValue("Last Issued(MemID)");
            jTable1.getTableHeader().resizeAndRepaint();
            //Coloumnautosizer.sizeColumnsToFit(jTable1);

        } catch (Exception e) {
            System.err.println(e);
            //System.exit(1);
        }
    }
    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusGained

    private void TxtBookIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBookIDKeyReleased
        // TODO add your handling code here:
        if (flag1 == 1 || TxtTitle.getText().length() > 0 || TxtKeyword.getText().length() > 0 || TxtBillNumber.getText().length() > 0 || TxtBookID.getText().length() > 0 || TxtAuthor.getText().length() > 0) {
            retBook();
            countBook();
        } else {
            clearTable();
        }
    }//GEN-LAST:event_TxtBookIDKeyReleased

    private void TxtTitleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtTitleKeyReleased
        // TODO add your handling code here:
        if (flag1 == 1 || TxtTitle.getText().length() > 0 || TxtKeyword.getText().length() > 0 || TxtBillNumber.getText().length() > 0 || TxtBookID.getText().length() > 0 || TxtAuthor.getText().length() > 0) {
            retBook();
            countBook();
        } else {
            clearTable();
        }
    }//GEN-LAST:event_TxtTitleKeyReleased

    private void TxtAuthorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtAuthorKeyReleased
        // TODO add your handling code here:
        if (flag1 == 1 || TxtTitle.getText().length() > 0 || TxtKeyword.getText().length() > 0 || TxtBillNumber.getText().length() > 0 || TxtBookID.getText().length() > 0 || TxtAuthor.getText().length() > 0) {
            retBook();
            countBook();
        } else {
            clearTable();
        }
    }//GEN-LAST:event_TxtAuthorKeyReleased

    private void TxtBillNumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBillNumberKeyReleased
        // TODO add your handling code here:
        if (flag1 == 1 || TxtTitle.getText().length() > 0 || TxtKeyword.getText().length() > 0 || TxtBillNumber.getText().length() > 0 || TxtBookID.getText().length() > 0 || TxtAuthor.getText().length() > 0) {
            retBook();
            countBook();
        } else {
            clearTable();
        }
    }//GEN-LAST:event_TxtBillNumberKeyReleased

    private void TxtKeywordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtKeywordKeyReleased
        // TODO add your handling code here:
        if (flag1 == 1 || TxtTitle.getText().length() > 0 || TxtKeyword.getText().length() > 0 || TxtBillNumber.getText().length() > 0 || TxtBookID.getText().length() > 0 || TxtAuthor.getText().length() > 0) {
            retBook();
            countBook();
        } else {
            clearTable();
        }
    }//GEN-LAST:event_TxtKeywordKeyReleased

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        int col = jTable1.getSelectedColumn();
        if (row >= 0 || col >= 0) {
            String selected = jTable1.getColumnName(col);
            try {
                // TODO add your handling code here:
                connection = Util.getConnection();
                PreparedStatement psmnt = connection.prepareStatement("update bookmaster set " + selected + "=? where book_id=?");
                psmnt.setString(1, jTable1.getValueAt(row, col).toString());
                psmnt.setString(2, jTable1.getValueAt(row, 0).toString());
                int a = psmnt.executeUpdate();
                if (a > 0) {
                    JOptionPane.showMessageDialog(this, "Data successfully updated.");
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jTable1PropertyChange

    private void CmdSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CmdSearchMouseClicked
        // TODO add your handling code here:
        flag1 = 1;
        retBook();
        countBook();
        flag1 = 0;
    }//GEN-LAST:event_CmdSearchMouseClicked

    private void CmdClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CmdClearMouseClicked
        // TODO add your handling code here:
        flag1 = 0;
        clearTable();
        TxtBookID.setText("");
        TxtTitle.setText("");
        TxtAuthor.setText("");
        TxtBillNumber.setText("");
        TxtKeyword.setText("");
    }//GEN-LAST:event_CmdClearMouseClicked

    private void CmdPrintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CmdPrintMouseClicked
        // TODO add your handling code here:
        if (jTable1.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Table is empty");
        } else {

            try {
                PrinterJob job = PrinterJob.getPrinterJob();
                job.setPrintable(this);

                MessageFormat header = new MessageFormat("Report :- Book Stock");
                MessageFormat footer = new MessageFormat("Páge{0,number,integer}");
                try {
                    jTable1.print(JTable.PrintMode.FIT_WIDTH, header, footer);
                } catch (java.awt.print.PrinterException e) {

                    System.err.format("cant Print %s%n", e.getMessage());
                    e.printStackTrace();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_CmdPrintMouseClicked

    private void Export2ExcelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Export2ExcelMouseClicked
        // TODO add your handling code here:
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        String filename = "";

        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            filename = (file.toString() + ".xls").replace('\\', '/');
        }

        flag = 0;
        try {


            connection = Util.getConnection();
            ResultSet rs;

            String StrQr = "";
            String filter = "";


            if (ChkAvail.isSelected()) {
                filter = " status IN ('Available','Issued','Issuing','Receiving') ";
            } else if (ChkNonIssued.isSelected()) {
                filter = " status = 'Available' ";
            } else if (ChkIssued.isSelected()) {
                filter = " status IN ('Issued','Issuing','Receiving') ";
            } else if (ChkNotAvail.isSelected()) {
                filter = " status = 'Not Available' ";
            } else if (ChkAll.isSelected()) {
                filter = " status IN ('Available','Issued','Issuing','Receiving', 'Not Available') ";
            }

            if (TxtBookID.getText().trim().length() > 0) {
                StrQr = StrQr + " and book_id = " + TxtBookID.getText().trim() + "";
                flag = 1;
            }
            if (TxtTitle.getText().trim().length() > 0) {
                StrQr = StrQr + " and title like '%" + TxtTitle.getText().trim() + "%'";
                flag = 1;
            }
            if (TxtAuthor.getText().trim().length() > 0) {
                StrQr = StrQr + " and author like '%" + TxtAuthor.getText().trim() + "%'";
                flag = 1;
            }
            if (TxtBillNumber.getText().trim().length() > 0) {
                StrQr = StrQr + " and billno like '%" + TxtBillNumber.getText().trim() + "%' ";
                flag = 1;
            }
            if (TxtKeyword.getText().trim().length() > 0) {
                StrQr = StrQr + " and keyword like '%" + TxtKeyword.getText().trim() + "%'";
                flag = 1;
            }


            if (flag == 1) {
                System.out.println("jjjjjjjj");
                PreparedStatement stmt = connection.prepareStatement("select 'BOOK ID', 'TITLE', 'AUTHOR', 'PLACE', 'PUBLISHER', 'EDITION', 'PUBLICATION YEAR', 'CATEGORY', 'PRICE', 'VOLUME', 'BILL NUMBER', 'BILL DATE', 'ISBN NO' union select book_id, title, author, place, publisher, edition, publication_year, category, price, volume, billno, billdate, isbnno  INTO OUTFILE '" + filename + "' LINES TERMINATED BY '\n' from bookmaster where " + filter + " " + StrQr + "  ");
                rs = stmt.executeQuery();
            } else if (!filter.equals("")) {
                System.out.println("mmmmmmm");
                PreparedStatement stmt = connection.prepareStatement("select 'BOOK ID', 'TITLE', 'AUTHOR', 'PLACE', 'PUBLISHER', 'EDITION', 'PUBLICATION YEAR', 'CATEGORY', 'PRICE', 'VOLUME', 'BILL NUMBER', 'BILL DATE', 'ISBN NO' union select book_id, title, author, place, publisher, edition, publication_year, category, price, volume, billno, billdate, isbnno  INTO OUTFILE '" + filename + "' LINES TERMINATED BY '\n' from bookmaster where " + filter + " ");
                rs = stmt.executeQuery();
            } else {
                System.out.println("mmmmmmmmmmmmmmmmmmm");
                PreparedStatement stmt = connection.prepareStatement("select 'BOOK ID', 'TITLE', 'AUTHOR', 'PLACE', 'PUBLISHER', 'EDITION', 'PUBLICATION YEAR', 'CATEGORY', 'PRICE', 'VOLUME', 'BILL NUMBER', 'BILL DATE', 'ISBN NO' union select book_id, title, author, place, publisher, edition, publication_year, category, price, volume, billno, billdate, isbnno  INTO OUTFILE '" + filename + "' LINES TERMINATED BY '\n' from bookmaster ");
                rs = stmt.executeQuery();
            }
            JOptionPane.showMessageDialog(this, "Excel file successfully exported.");

        } catch (Exception e) {
            System.err.println(e);
            //System.exit(1);
        }
    }//GEN-LAST:event_Export2ExcelMouseClicked

    private void ChkAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkAllActionPerformed
        // TODO add your handling code here:
        retBook();
        countBook();
    }//GEN-LAST:event_ChkAllActionPerformed

    private void ChkAvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkAvailActionPerformed
        // TODO add your handling code here:
        retBook();
        countBook();
    }//GEN-LAST:event_ChkAvailActionPerformed

    private void ChkNotAvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkNotAvailActionPerformed
        // TODO add your handling code here:
        retBook();
        countBook();
    }//GEN-LAST:event_ChkNotAvailActionPerformed

    private void ChkIssuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkIssuedActionPerformed
        // TODO add your handling code here:
        retBook();
        countBook();
    }//GEN-LAST:event_ChkIssuedActionPerformed

    private void IndexFirstMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IndexFirstMouseClicked
        // TODO add your handling code here:
        System.out.println("from " + from);
        from = 0;
        retBook();
    }//GEN-LAST:event_IndexFirstMouseClicked

    private void IndexPrvsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IndexPrvsMouseClicked
        // TODO add your handling code here:
        System.out.println("from " + from);
        if (from <= 0) {
            from = 0;
            retBook();
        } else {
            from -= 50;
            retBook();
        }

    }//GEN-LAST:event_IndexPrvsMouseClicked

    private void IndexNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IndexNextMouseClicked
        // TODO add your handling code here:
        System.out.println("from " + from);
        if (from + 50 > rowcount) {
            retBook();
            from -= 50;
        } else if (from < 0) {
            from = 0;
            retBook();
        } else {
            from += 50;
            retBook();
        }

    }//GEN-LAST:event_IndexNextMouseClicked

    private void IndexLastMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IndexLastMouseClicked
        // TODO add your handling code here:
        System.out.println("from " + from);
        if (rowcount != 0) {
            int rem = rowcount % 50;
            if (rem != 0) {

                from = rowcount / 50 * 50;
                retBook();
            } else {
                from = rowcount - 50;
                retBook();
            }

        }
    }//GEN-LAST:event_IndexLastMouseClicked

    private void ChkNonIssuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkNonIssuedActionPerformed
        // TODO add your handling code here:
        retBook();
        countBook();
    }//GEN-LAST:event_ChkNonIssuedActionPerformed

    public void clearTable() {
        while (jTable1.getRowCount() > 0) {
            ((DefaultTableModel) jTable1.getModel()).removeRow(0);
        }
        lblcBook.setText("");
    }

    public void countBook() {
        flag = 0;
        try {


            connection = Util.getConnection();
            ResultSet rs;

            String StrQr = "";
            String filter = "";
            String cbook = "";

            if (ChkAvail.isSelected()) {
                filter = " status IN ('Available','Issued','Issuing','Receiving') ";
                cbook = "No. of available books in library: ";
            } else if (ChkNonIssued.isSelected()) {
                filter = " status = 'Available' ";
                cbook = "No. of available books in stock: ";
            } else if (ChkIssued.isSelected()) {
                filter = " status IN ('Issued','Issuing','Receiving') ";
                cbook = "No. of issued books : ";
            } else if (ChkNotAvail.isSelected()) {
                filter = " status = 'Not Available' ";
                cbook = "No. of damaged books : ";
            } else {
                filter = " status IN ('Available','Issued','Issuing','Receiving','Not Available') ";
                cbook = "Total no. of books : ";
            }

            if (TxtBookID.getText().trim().length() > 0) {
                StrQr = StrQr + " and book_id = " + TxtBookID.getText().trim() + "";
                flag = 1;
            }
            if (TxtTitle.getText().trim().length() > 0) {
                StrQr = StrQr + " and title like '%" + TxtTitle.getText().trim() + "%'  ";
                flag = 1;
            }
            if (TxtAuthor.getText().trim().length() > 0) {
                StrQr = StrQr + " and author like '%" + TxtAuthor.getText().trim() + "%'  ";
                flag = 1;
            }
            if (TxtBillNumber.getText().trim().length() > 0) {
                StrQr = StrQr + " and billno like '%" + TxtBillNumber.getText().trim() + "%'  ";
                flag = 1;
                System.out.println("hello");
            }
            if (TxtKeyword.getText().trim().length() > 0) {
                StrQr = StrQr + " and keyword like '%" + TxtKeyword.getText().trim() + "%' ";
                flag = 1;
            }


            if (flag == 1) {
                PreparedStatement stmt = connection.prepareStatement("select count(Book_ID) from bookmaster where " + filter + " " + StrQr + " ");
                rs = stmt.executeQuery();
            } else if (!filter.equals("")) {
                PreparedStatement stmt = connection.prepareStatement("select count(Book_ID) from bookmaster where " + filter + " ");
                rs = stmt.executeQuery();
            } else {
                PreparedStatement stmt = connection.prepareStatement("select count(Book_ID) from bookmaster ");
                rs = stmt.executeQuery();
            }
            if (rs.next()) {
                cbook = cbook + rs.getString(1);
            } else {
                lblcBook.setText("");
                return;
            }

            if (TxtBookID.getText().length() > 0) {
                cbook = cbook + ", Book ID: " + TxtBookID.getText();
            }
            if (TxtTitle.getText().length() > 0) {
                cbook = cbook + ", Book Name: " + TxtTitle.getText();
            }
            if (TxtAuthor.getText().length() > 0) {
                cbook = cbook + ", Author: " + TxtAuthor.getText();
            }
            if (TxtBillNumber.getText().length() > 0) {
                cbook = cbook + ", Bill Number: " + TxtBillNumber.getText();
            }

            lblcBook.setText(cbook);


        } catch (Exception e) {
            System.err.println(e);
            //System.exit(1);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ChkAll;
    private javax.swing.JRadioButton ChkAvail;
    private javax.swing.JRadioButton ChkIssued;
    private javax.swing.JRadioButton ChkNonIssued;
    private javax.swing.JRadioButton ChkNotAvail;
    private javax.swing.JLabel CmdClear;
    private javax.swing.JLabel CmdPrint;
    private javax.swing.JLabel CmdSearch;
    private javax.swing.JLabel Export2Excel;
    private javax.swing.JLabel IndexFirst;
    private javax.swing.JLabel IndexLast;
    private javax.swing.JLabel IndexNext;
    private javax.swing.JLabel IndexPrvs;
    private javax.swing.JTextField TxtAuthor;
    private javax.swing.JTextField TxtBillNumber;
    private javax.swing.JTextField TxtBookID;
    private javax.swing.JTextField TxtKeyword;
    private javax.swing.JTextField TxtTitle;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelid;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblMemname;
    private javax.swing.JLabel lblcBook;
    // End of variables declaration//GEN-END:variables

    @Override
    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
