/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Com.Dufins.Developer.Applications.Library;

import Util.Coloumnautosizer;
import Util.Util;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NITISH SRIVASTAVA
 */
public class Report extends javax.swing.JPanel implements Printable {

    /**
     * Creates new form Report
     */
    Connection connection = null;
    String value = "";
    private int from = 0;
    private int rowcount;

    public Report() {
        initComponents();
        Chk_All.setSelected(true);
        txtMember.setText("");
        txtMember.setEnabled(false);
        Cmb_Member.setSelectedIndex(0);
        jTable1.getColumnModel().getColumn(0).setHeaderValue("Member");
        jTable1.getColumnModel().getColumn(1).setHeaderValue("Book");
        jTable1.getColumnModel().getColumn(2).setHeaderValue("Issue Date");
        jTable1.getColumnModel().getColumn(3).setHeaderValue("Receive Date");
        jTable1.getTableHeader().resizeAndRepaint();

        // Removing Previous Data
        while (jTable1.getRowCount() > 0) {
            ((DefaultTableModel) jTable1.getModel()).removeRow(0);

        }
        try {
            connection = Util.getConnection();
            Statement stmtcount = connection.createStatement();
            ResultSet rscount = stmtcount.executeQuery(" select count(trn_id) from transaction ");
            while (rscount.next()) {
                rowcount = rscount.getInt(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        MemberData = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableMemberData = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        Chk_Rcv = new javax.swing.JRadioButton();
        Chk_NonRcv = new javax.swing.JRadioButton();
        Chk_All = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        Cmb_Member = new javax.swing.JComboBox();
        txtMember = new javax.swing.JTextField();
        BtnRefresh = new javax.swing.JLabel();
        BtnPrint = new javax.swing.JLabel();
        Export2Excel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        IndexFirst = new javax.swing.JLabel();
        IndexPrvs = new javax.swing.JLabel();
        IndexNext = new javax.swing.JLabel();
        IndexLast = new javax.swing.JLabel();

        MemberData.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                MemberDataWindowClosing(evt);
            }
        });
        MemberData.getContentPane().setLayout(new javax.swing.BoxLayout(MemberData.getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jTableMemberData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableMemberData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTableMemberData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMemberDataMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableMemberData);

        MemberData.getContentPane().add(jScrollPane2);

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
        jScrollPane1.getViewport().setBackground(Color.WHITE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        Chk_Rcv.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(Chk_Rcv);
        Chk_Rcv.setText("Received");
        Chk_Rcv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Chk_RcvActionPerformed(evt);
            }
        });

        Chk_NonRcv.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(Chk_NonRcv);
        Chk_NonRcv.setText("Not-Received");
        Chk_NonRcv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Chk_NonRcvActionPerformed(evt);
            }
        });

        Chk_All.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(Chk_All);
        Chk_All.setText("All");
        Chk_All.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Chk_AllActionPerformed(evt);
            }
        });

        jLabel2.setText("Search By:");

        Cmb_Member.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Member ID", "Member Name", "Member Type" }));
        Cmb_Member.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cmb_MemberActionPerformed(evt);
            }
        });

        txtMember.setBackground(new java.awt.Color(255, 204, 102));
        txtMember.setText("jTextField1");

        BtnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/update-icon.png"))); // NOI18N
        BtnRefresh.setToolTipText("Refresh Report");
        BtnRefresh.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BtnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnRefreshMouseClicked(evt);
            }
        });

        BtnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/print_icon.png"))); // NOI18N
        BtnPrint.setToolTipText("Print Report");
        BtnPrint.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnPrint.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BtnPrint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnPrintMouseClicked(evt);
            }
        });

        Export2Excel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/table_excel.png"))); // NOI18N
        Export2Excel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Export2Excel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Export2Excel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Export2ExcelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Cmb_Member, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtMember))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Chk_All, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Chk_NonRcv)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Chk_Rcv, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(BtnRefresh)
                                .addGap(18, 18, 18)
                                .addComponent(BtnPrint)))
                        .addGap(18, 18, 18)
                        .addComponent(Export2Excel)))
                .addContainerGap(167, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BtnRefresh)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Chk_All)
                            .addComponent(jLabel2)
                            .addComponent(Cmb_Member, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Chk_Rcv))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Chk_NonRcv))
                    .addComponent(BtnPrint)
                    .addComponent(Export2Excel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/nilaicon.png"))); // NOI18N

        IndexFirst.setBackground(new java.awt.Color(255, 255, 255));
        IndexFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/First_1.png"))); // NOI18N
        IndexFirst.setToolTipText("First Index");
        IndexFirst.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        IndexFirst.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        IndexFirst.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IndexFirstMouseClicked(evt);
            }
        });

        IndexPrvs.setBackground(new java.awt.Color(255, 255, 255));
        IndexPrvs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/prev_1.png"))); // NOI18N
        IndexPrvs.setToolTipText("Previous Index");
        IndexPrvs.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        IndexPrvs.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        IndexPrvs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IndexPrvsMouseClicked(evt);
            }
        });

        IndexNext.setBackground(new java.awt.Color(255, 255, 255));
        IndexNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/next_1.png"))); // NOI18N
        IndexNext.setToolTipText("Next Index");
        IndexNext.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        IndexNext.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        IndexNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IndexNextMouseClicked(evt);
            }
        });

        IndexLast.setBackground(new java.awt.Color(255, 255, 255));
        IndexLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/last_1.png"))); // NOI18N
        IndexLast.setToolTipText("Last Index");
        IndexLast.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        IndexLast.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        IndexLast.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IndexLastMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(IndexFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IndexPrvs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IndexNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IndexLast)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IndexFirst)
                    .addComponent(IndexPrvs)
                    .addComponent(IndexNext)
                    .addComponent(IndexLast))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void Chk_RcvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Chk_RcvActionPerformed
        // TODO add your handling code here:
        BtnRefreshMouseClicked(null);
    }//GEN-LAST:event_Chk_RcvActionPerformed

    private void Chk_NonRcvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Chk_NonRcvActionPerformed
        // TODO add your handling code here:
        BtnRefreshMouseClicked(null);
    }//GEN-LAST:event_Chk_NonRcvActionPerformed

    private void Chk_AllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Chk_AllActionPerformed
        // TODO add your handling code here:
        BtnRefreshMouseClicked(null);
    }//GEN-LAST:event_Chk_AllActionPerformed

    private void MemberDataWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_MemberDataWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_MemberDataWindowClosing

    private void jTableMemberDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMemberDataMouseClicked
        // TODO add your handling code here:
        int row = jTableMemberData.getSelectedRow();
        try {
            value = jTableMemberData.getValueAt(row, 0).toString();
            BtnRefreshMouseClicked(null);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jTableMemberDataMouseClicked

    private void BtnRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnRefreshMouseClicked
        // TODO add your handling code here:
        // TODO add your handling code here:
        try {
            connection = Util.getConnection();
            ResultSet rs = null;
            PreparedStatement stmt = null;

            if (Cmb_Member.getSelectedIndex() == 1) {
                value = txtMember.getText();
            } else if (Cmb_Member.getSelectedIndex() == 2) {
                stmt = connection.prepareStatement("SELECT mem_id as ' MEMBER ID', mem_name as 'MEMBER NAME' FROM membermaster where mem_name like '" + txtMember.getText() + "%' order by mem_id");
                rs = stmt.executeQuery();
                jTableMemberData.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
                Coloumnautosizer.sizeColumnsToFit(jTableMemberData);
                MemberData.setVisible(true);
                MemberData.setBounds(100, 100, 150, 500);
            }


            if (Chk_All.isSelected()) {
                stmt = connection.prepareStatement("SELECT m.mem_id, m.mem_name,b.title, l.trn_issue_dt, l.trn_receive_dt FROM bookmaster b, transaction l join membermaster m  on l.trn_mem_id = m.mem_id where l.trn_mem_id='" + value + "' and l.trn_book_id = b.book_id order by l.trn_id limit " + from + ", 50");
            } else if (Chk_Rcv.isSelected()) {
                stmt = connection.prepareStatement("SELECT m.mem_id, m.mem_name,b.title, l.trn_issue_dt, l.trn_receive_dt FROM bookmaster b, transaction l join membermaster m on l.trn_mem_id = m.mem_id where l.trn_mem_id='" + value + "' and l.trn_book_id = b.book_id and  l.trn_receive_dt IS NOT NULL order by l.trn_id limit " + from + ", 50");
            } else if (Chk_NonRcv.isSelected()) {
                stmt = connection.prepareStatement("SELECT m.mem_id, m.mem_name,b.title, l.trn_issue_dt, l.trn_receive_dt FROM bookmaster b, transaction l join membermaster m on l.trn_mem_id = m.mem_id where l.trn_mem_id='" + value + "' and l.trn_book_id = b.book_id and  l.trn_receive_dt IS NULL order by l.trn_id limit " + from + ", 50");
            }

            if (Cmb_Member.getSelectedIndex() == 0) {
                if (Chk_All.isSelected()) {
                    stmt = connection.prepareStatement("SELECT m.mem_id, m.mem_name,b.title, l.trn_issue_dt, l.trn_receive_dt FROM transaction l, bookmaster b, membermaster m where l.trn_book_id=b.book_id and l.trn_mem_id=m.mem_id order by l.trn_id limit " + from + ", 50");
                } else if (Chk_Rcv.isSelected()) {
                    stmt = connection.prepareStatement("SELECT m.mem_id, m.mem_name,b.title, l.trn_issue_dt, l.trn_receive_dt FROM transaction l, bookmaster b, membermaster m where l.trn_book_id=b.book_id and l.trn_mem_id=m.mem_id and  l.trn_receive_dt IS NOT NULL order by l.trn_id limit " + from + ", 50");
                } else if (Chk_NonRcv.isSelected()) {
                    stmt = connection.prepareStatement("SELECT m.mem_id, m.mem_name,b.title, l.trn_issue_dt, l.trn_receive_dt FROM transaction l, bookmaster b, membermaster m where l.trn_book_id=b.book_id and l.trn_mem_id=m.mem_id and  l.trn_receive_dt IS NULL order by l.trn_id limit " + from + ", 50");
                }
            }

            rs = stmt.executeQuery();
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Member ID");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Member Name");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Book Name");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("Issue Date");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("Receive Date");
            jTable1.getTableHeader().resizeAndRepaint();

            // Removing Previous Data
            while (jTable1.getRowCount() > 0) {
                ((DefaultTableModel) jTable1.getModel()).removeRow(0);
            }

            //Creating Object []rowData for jTable's Table Model

            int columns = rs.getMetaData().getColumnCount();
            while (rs.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = rs.getObject(i); // 1
                }
                ((DefaultTableModel) jTable1.getModel()).insertRow(rs.getRow() - 1, row);
            }

        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_BtnRefreshMouseClicked

    private void BtnPrintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnPrintMouseClicked
        // TODO add your handling code here:
        // TODO add your handling code here:
        if (jTable1.getRowCount() > 0) {

            try {
                PrinterJob job = PrinterJob.getPrinterJob();
                job.setPrintable(this);

                MessageFormat header = new MessageFormat("Book Issue Report");
                MessageFormat footer = new MessageFormat("Páge{0,number,integer}");
                try {
                    jTable1.print(JTable.PrintMode.FIT_WIDTH, header, footer);
                } catch (java.awt.print.PrinterException e) {

                    System.err.format("cant Print %s%n", e.getMessage());
                    e.printStackTrace();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Table is empty");
        }
    }//GEN-LAST:event_BtnPrintMouseClicked

    private void Cmb_MemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cmb_MemberActionPerformed
        // TODO add your handling code here:
        if (Cmb_Member.getSelectedIndex() == 0) {
            txtMember.setEnabled(false);
        } else {
            txtMember.setEnabled(true);
        }
    }//GEN-LAST:event_Cmb_MemberActionPerformed

    private void Export2ExcelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Export2ExcelMouseClicked
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        String filename = "";

            int returnVal = fc.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                filename = (file.toString()+".xls").replace('\\', '/');
            }
            
        try {
            connection = Util.getConnection();
            ResultSet rs = null;
            PreparedStatement stmt = null;

            if (Cmb_Member.getSelectedIndex() == 1) {
                value = txtMember.getText();
            } else if (Cmb_Member.getSelectedIndex() == 2) {
                stmt = connection.prepareStatement("SELECT mem_id as ' MEMBER ID', mem_name as 'MEMBER NAME' FROM membermaster where mem_name like '" + txtMember.getText() + "%' order by mem_id");
                rs = stmt.executeQuery();
                jTableMemberData.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
                Coloumnautosizer.sizeColumnsToFit(jTableMemberData);
                MemberData.setVisible(true);
                MemberData.setBounds(100, 100, 150, 500);
            }


            if (Chk_All.isSelected()) {
                stmt = connection.prepareStatement("SELECT 'Member ID', 'Member Name', 'Book Title', 'Issue Date', 'Receive Date' union SELECT m.mem_id, m.mem_name,b.title, l.trn_issue_dt, l.trn_receive_dt INTO OUTFILE '" + filename + "' LINES TERMINATED BY '\n' FROM bookmaster b, transaction l join membermaster m  on l.trn_mem_id = m.mem_id where l.trn_mem_id='" + value + "' and l.trn_book_id = b.book_id ");
            } else if (Chk_Rcv.isSelected()) {
                stmt = connection.prepareStatement("SELECT 'Member ID', 'Member Name', 'Book Title', 'Issue Date', 'Receive Date' union SELECT m.mem_id, m.mem_name,b.title, l.trn_issue_dt, l.trn_receive_dt INTO OUTFILE '" + filename + "' LINES TERMINATED BY '\n' FROM bookmaster b, transaction l join membermaster m on l.trn_mem_id = m.mem_id where l.trn_mem_id='" + value + "' and l.trn_book_id = b.book_id and  l.trn_receive_dt IS NOT NULL ");
            } else if (Chk_NonRcv.isSelected()) {
                stmt = connection.prepareStatement("SELECT 'Member ID', 'Member Name', 'Book Title', 'Issue Date', 'Receive Date' union SELECT m.mem_id, m.mem_name,b.title, l.trn_issue_dt, l.trn_receive_dt INTO OUTFILE '" + filename + "' LINES TERMINATED BY '\n' FROM bookmaster b, transaction l join membermaster m on l.trn_mem_id = m.mem_id where l.trn_mem_id='" + value + "' and l.trn_book_id = b.book_id and  l.trn_receive_dt IS NULL ");
            }

            if (Cmb_Member.getSelectedIndex() == 0) {
                if (Chk_All.isSelected()) {
                    stmt = connection.prepareStatement("SELECT 'Member ID', 'Member Name', 'Book Title', 'Issue Date', 'Receive Date' union SELECT m.mem_id, m.mem_name,b.title, l.trn_issue_dt, l.trn_receive_dt INTO OUTFILE '" + filename + "' LINES TERMINATED BY '\n' FROM transaction l, bookmaster b, membermaster m where l.trn_book_id=b.book_id and l.trn_mem_id=m.mem_id ");
                } else if (Chk_Rcv.isSelected()) {
                    stmt = connection.prepareStatement("SELECT 'Member ID', 'Member Name', 'Book Title', 'Issue Date', 'Receive Date' union SELECT m.mem_id, m.mem_name,b.title, l.trn_issue_dt, l.trn_receive_dt INTO OUTFILE '" + filename + "' LINES TERMINATED BY '\n' FROM transaction l, bookmaster b, membermaster m where l.trn_book_id=b.book_id and l.trn_mem_id=m.mem_id and  l.trn_receive_dt IS NOT NULL ");
                } else if (Chk_NonRcv.isSelected()) {
                    stmt = connection.prepareStatement("SELECT 'Member ID', 'Member Name', 'Book Title', 'Issue Date', 'Receive Date' union SELECT m.mem_id, m.mem_name,b.title, l.trn_issue_dt, l.trn_receive_dt INTO OUTFILE '" + filename + "' LINES TERMINATED BY '\n' FROM transaction l, bookmaster b, membermaster m where l.trn_book_id=b.book_id and l.trn_mem_id=m.mem_id and  l.trn_receive_dt IS NULL ");
                }
            }

            rs = stmt.executeQuery();
            JOptionPane.showMessageDialog(this, "Data successfully exported to Excel.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_Export2ExcelMouseClicked

    private void IndexFirstMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IndexFirstMouseClicked
        // TODO add your handling code here:
        from = 0;
        BtnRefreshMouseClicked(null);
    }//GEN-LAST:event_IndexFirstMouseClicked

    private void IndexPrvsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IndexPrvsMouseClicked
        // TODO add your handling code here:

        if (from <= 0) {
            from = 0;
            BtnRefreshMouseClicked(null);
        } else {
            from -= 50;
            BtnRefreshMouseClicked(null);
        }
    }//GEN-LAST:event_IndexPrvsMouseClicked

    private void IndexNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IndexNextMouseClicked
        // TODO add your handling code here:

        if (from + 50 > rowcount) {
            BtnRefreshMouseClicked(null);
            from -= 50;
        } else if (from < 0) {
            from = 0;
            BtnRefreshMouseClicked(null);
        } else {
            from += 50;
            BtnRefreshMouseClicked(null);
        }
    }//GEN-LAST:event_IndexNextMouseClicked

    private void IndexLastMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IndexLastMouseClicked
        // TODO add your handling code here:

        if (rowcount != 0) {
            int rem = rowcount % 50;
            if (rem != 0) {

                from = rowcount / 50 * 50;
                BtnRefreshMouseClicked(null);
            } else {
                from = rowcount - 50;
                BtnRefreshMouseClicked(null);
            }

        }
    }//GEN-LAST:event_IndexLastMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BtnPrint;
    private javax.swing.JLabel BtnRefresh;
    private javax.swing.JRadioButton Chk_All;
    private javax.swing.JRadioButton Chk_NonRcv;
    private javax.swing.JRadioButton Chk_Rcv;
    private javax.swing.JComboBox Cmb_Member;
    private javax.swing.JLabel Export2Excel;
    private javax.swing.JLabel IndexFirst;
    private javax.swing.JLabel IndexLast;
    private javax.swing.JLabel IndexNext;
    private javax.swing.JLabel IndexPrvs;
    private javax.swing.JFrame MemberData;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableMemberData;
    private javax.swing.JTextField txtMember;
    // End of variables declaration//GEN-END:variables

    @Override
    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
