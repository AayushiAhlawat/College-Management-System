/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Com.Dufins.Developer.STManagement.Forms;

import Util.Coloumnautosizer;
import Util.Util;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nitish Srivastava
 */
public class SISReport extends javax.swing.JPanel implements Printable {

    /**
     * Creates new form SISReport
     */
    Connection con = null;
    PreparedStatement psmnt = null;
    ResultSet rs = null;
    String selection = "";
    Object[][] pr;
    int rowpr = 0, rowsd = 0, rowdue = 0;

    public SISReport() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbls = new javax.swing.JLabel();
        cmb_search = new javax.swing.JComboBox();
        lblsw = new javax.swing.JLabel();
        cmb_SearchWise = new javax.swing.JComboBox();
        txt_search = new javax.swing.JTextField();
        cmbCourse = new javax.swing.JComboBox();
        cmbBranch = new javax.swing.JComboBox();
        lblcourse = new javax.swing.JLabel();
        lblbranch = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnPrint = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Report = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbls.setText("Search");

        cmb_search.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Student's Details", "Due's Details" }));
        cmb_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_searchActionPerformed(evt);
            }
        });

        lblsw.setText("Search Wise");

        cmb_SearchWise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_SearchWiseActionPerformed(evt);
            }
        });

        txt_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txt_searchMouseEntered(evt);
            }
        });
        txt_search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_searchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_searchFocusLost(evt);
            }
        });
        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchKeyReleased(evt);
            }
        });

        cmbCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCourseActionPerformed(evt);
            }
        });

        cmbBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBranchActionPerformed(evt);
            }
        });

        lblcourse.setText("Course");

        lblbranch.setText("Branch");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(1));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(btnSearch)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSearch)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(1));

        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(btnPrint)
                .addContainerGap(75, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPrint)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbls)
                    .addComponent(lblsw)
                    .addComponent(lblcourse))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmb_search, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_SearchWise, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblbranch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(lbls)
                                .addGap(17, 17, 17)
                                .addComponent(lblsw)
                                .addGap(24, 24, 24)
                                .addComponent(lblcourse))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmb_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cmb_SearchWise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblbranch))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTable_Report.setBorder(new javax.swing.border.SoftBevelBorder(1));
        jTable_Report.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable_Report.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable_Report);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/nilaicon.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmb_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_searchActionPerformed
        // TODO add your handling code here:
        int option = cmb_search.getSelectedIndex();
        lblsw.setVisible(false);
        lblcourse.setVisible(false);
        lblbranch.setVisible(false);
        txt_search.setVisible(false);
        cmbBranch.setVisible(false);
        cmbCourse.setVisible(false);
        cmb_SearchWise.setVisible(false);
        btnSearch.setEnabled(false);
        switch (option) {
            case 0:
                lblsw.setVisible(true);
                cmb_SearchWise.setVisible(true);
                cmb_SearchWise.setModel(new DefaultComboBoxModel(new String[]{"All", "Roll Number", "Enrollment Number", "First Name", "Middle Name", "Last Name"}));
                break;

            case 1:
                lblsw.setVisible(true);
                cmb_SearchWise.setVisible(true);
                cmb_SearchWise.setModel(new DefaultComboBoxModel(new String[]{"All", "Course"}));
        }
        cmb_SearchWise.setSelectedIndex(0);
        cmb_SearchWiseActionPerformed(evt);
    }//GEN-LAST:event_cmb_searchActionPerformed

    private void cmb_SearchWiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_SearchWiseActionPerformed
        // TODO add your handling code here:
        lblcourse.setVisible(false);
        lblbranch.setVisible(false);
        cmbBranch.setVisible(true);
        txt_search.setVisible(false);
        cmbBranch.setVisible(false);
        cmbCourse.setVisible(false);
        if (txt_search.getText().length() <= 0) {
            btnSearch.setEnabled(false);
        } else {
            btnSearch.setEnabled(true);
        }

        int soption = cmb_search.getSelectedIndex();
        if (soption == 0) {
            int swoption = cmb_SearchWise.getSelectedIndex();
            switch (swoption) {
                case 0:
                    btnSearch.setEnabled(true);
                    break;
                case 1:
                    txt_search.setToolTipText("Enter Roll Number");
                    txt_search.setVisible(true);
                    break;
                case 2:
                    txt_search.setToolTipText("Enter Enrollment Number");
                    txt_search.setVisible(true);
                    break;
                case 3:
                    txt_search.setToolTipText("Enter First Name");
                    txt_search.setVisible(true);
                    break;
                case 4:
                    txt_search.setToolTipText("Enter Middle Name");
                    txt_search.setVisible(true);
                    break;
                case 5:
                    txt_search.setToolTipText("Enter Last Name");
                    txt_search.setVisible(true);
                    break;
            }
        } else if (soption == 1) {
            int swoption = cmb_SearchWise.getSelectedIndex();
            switch (swoption) {
                case 0:
                    btnSearch.setEnabled(true);
                    break;
                case 1:
                    System.out.println("6");
                    lblcourse.setVisible(true);
                    lblbranch.setVisible(true);
                    btnSearch.setEnabled(true);
                    cmbBranch.setVisible(true);
                    cmbCourse.setVisible(true);
                    txt_search.setVisible(true);
                    txt_search.setToolTipText("Enter Session (yyyy-yyyy)");
                    retrieveCourse();
                    retrieveBranch();
                    break;
            }
        }
        txt_search.setForeground(Color.LIGHT_GRAY);
        txt_search.setText(txt_search.getToolTipText());
    }//GEN-LAST:event_cmb_SearchWiseActionPerformed

    private void txt_searchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_searchMouseEntered
        // TODO add your handling code here:
        txt_search.setFocusable(true);
    }//GEN-LAST:event_txt_searchMouseEntered

    private void txt_searchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchFocusGained
        // TODO add your handling code here:
        txt_search.setForeground(Color.black);
        if (txt_search.getText().trim().equals(txt_search.getToolTipText().trim())) {
            txt_search.setText("");
        }
    }//GEN-LAST:event_txt_searchFocusGained

    private void txt_searchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchFocusLost
        // TODO add your handling code here:
        if (txt_search.getText().length() == 0) {
            txt_search.setForeground(Color.LIGHT_GRAY);
            txt_search.setText(txt_search.getToolTipText());
        }
    }//GEN-LAST:event_txt_searchFocusLost

    private void txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyReleased
        // TODO add your handling code here:
        if (txt_search.getText().length() != 0) {
            txt_search.setForeground(Color.black);
            btnSearch.setEnabled(true);

        } else {
            btnSearch.setEnabled(false);
        }
    }//GEN-LAST:event_txt_searchKeyReleased

    private void cmbCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCourseActionPerformed
        // TODO add your handling code here:
        retrieveBranch();
    }//GEN-LAST:event_cmbCourseActionPerformed

    private void cmbBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBranchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbBranchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        if (cmb_search.getSelectedIndex() == 0) {
            columnSelection();
            int swoption = cmb_SearchWise.getSelectedIndex();
            switch (swoption) {
                case 0:
                    retsdAll();
                    break;
                case 1:
                    retsd();
                    break;
                case 2:
                    retsd();
                    break;
                case 3:
                    retsd();
                    break;
                case 4:
                    retsd();
                    break;
                case 5:
                    retsd();
                    break;
                case 6:
                    retsd();
                    break;

            }
        } else if (cmb_search.getSelectedIndex() == 1) {
            colSelection();
            int swoption = cmb_SearchWise.getSelectedIndex();
            switch (swoption) {
                case 0:
                    retddAll();
                    break;
                case 1:
                    retdd();
                    break;

            }
        }
        if (jTable_Report.getRowCount() > 0) {
            btnPrint.setEnabled(true);
        } else {
            btnPrint.setEnabled(false);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
        try {
            PrinterJob job = PrinterJob.getPrinterJob();
            job.setPrintable(this);

            MessageFormat header = new MessageFormat("Report : " + cmb_search.getSelectedItem().toString());
            MessageFormat footer = new MessageFormat("Páge{0,number,integer}");
            try {
                jTable_Report.print(JTable.PrintMode.FIT_WIDTH, header, footer);
            } catch (java.awt.print.PrinterException e) {

                System.err.format("cant Print %s%n", e.getMessage());
                e.printStackTrace();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    public void retsdAll() {
        try {
            con = Util.getConnection();
            psmnt = con.prepareStatement("select student_details.roll_number as 'ROLL NO', student_details.enrollment_number as 'ENROLLMENT NO', concat(student_details.first_name,' ',student_details.middle_name,' ',student_details.last_name) as 'NAME', student_details.father_name as 'FATHER NAME', student_details.bloodgroup as 'BLOOD GROUP', student_details.dob as 'DATE OF BIRTH', student_details.COURSE, student_details.BRANCH, student_details.SESSION, student_details.SEMESTER, student_address.padd as 'ADDRESS', student_address.pcity as 'CITY', student_address.pstate as 'STATE', student_address.pcountry as 'COUNTRY', student_address.ppin as 'PIN CODE' from student_details join student_address on student_details.roll_number = student_address.roll_number");
            rs = psmnt.executeQuery();
            jTable_Report.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            Coloumnautosizer.sizeColumnsToFit(jTable_Report);
            rs.close();
            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void retddAll() {
        try {
            con = Util.getConnection();
            psmnt = con.prepareStatement("select student_details.roll_number as 'ROLL NUMBER', student_details.enrollment_number as 'ENROLLMENT NO', concat(student_details.first_name,' ', student_details.middle_name,' ', student_details.last_name) as 'NAME',  student_details.course as 'COURSE', student_details.branch as 'BRANCH',due.tdue as 'TUTION DUE', due.hdue as 'HOSTEL DUE', due.mdue as 'MESS DUE', due.edue as 'EXAM DUE', due.bdue as 'BUSFARE DUE', due.udue as 'UNIFORMs DUE', due.odue as 'OTHERs DUE', due.totaldue as 'TOTAL DUE'  from due  join student_details on student_details.roll_number = due.roll_number");
            rs = psmnt.executeQuery();
            jTable_Report.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            Coloumnautosizer.sizeColumnsToFit(jTable_Report);
            rs.close();
            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void retsd() {
//        try {
//            con = Util.getConnection();
//            psmnt = con.prepareStatement("select student_details.roll_number as 'ROLL NO', student_details.enrollment_number as 'ENROLLMENT NO', concat(student_details.first_name,' ',student_details.middle_name,' ',student_details.last_name) as 'NAME', student_details.father_name as 'FATHER NAME', student_details.bloodgroup as 'BLOOD GROUP', student_details.dob as 'DATE OF BIRTH', student_details.COURSE, student_details.BRANCH, student_details.SESSION, student_details.SEMESTER, student_address.padd as 'ADDRESS', student_address.pcity as 'CITY', student_address.pstate as 'STATE', student_address.pcountry as 'COUNTRY', student_address.ppin as 'PIN CODE' from student_details join student_address on student_details.roll_number = student_address.roll_number " + selection + "");
//            rs = psmnt.executeQuery();
//            jTable_Report.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
//            Coloumnautosizer.sizeColumnsToFit(jTable_Report);
//            rs.close();
//            con.close();
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }

        try {
            con = Util.getConnection();
            /*
             * For count & retrive colmn name of student_details table
             */
            psmnt = con.prepareStatement("select roll_number as 'ROLL NUMBER', enrollment_number as 'ENROLLMENT NUMBER', concat(first_name,' ', middle_name,' ', last_name) as 'NAME', gender as 'GENDER', dob as 'DATE OF BIRTH', father_name as 'FATHER NAME', mother_name as 'MOTHER NAME', bloodgroup as 'BLOOD GROUP', marital_status as 'MARITAL STATUS', religion as 'RELIGION', cast as 'CASTE', nationality as 'NATIONALITY', course as 'COURSE', branch as 'BRANCH', semester as 'SEMESTER', session as 'SESSION' from student_details");
            ResultSet rsp = psmnt.executeQuery();
            ResultSetMetaData rm1 = rsp.getMetaData();

            int col2 = rm1.getColumnCount();

            System.out.println("col2 " + col2);
            String colname1[] = new String[col2 + 1];
            for (int i = 0; i < col2; i++) {
                colname1[i] = rm1.getColumnName(i + 1).toUpperCase();
                System.out.println("col22  " + colname1[i]);
            }
            /*
             * count total row in student_details
             */
            psmnt = con.prepareStatement("select count(roll_number) from student_details " + selection + "");
            ResultSet rs1 = psmnt.executeQuery();
            if (rs1.next()) {
                rowsd = rs1.getInt(1);
            }

            psmnt = con.prepareStatement("select count(rcpno) from pay_report join student_details on pay_report.rollno = student_details.roll_number " + selection + "");
            ResultSet rs2 = psmnt.executeQuery();
            if (rs2.next()) {
                rowpr = rs2.getInt(1);
            }

            psmnt = con.prepareStatement("select count(roll_number) from due");
            ResultSet rs3 = psmnt.executeQuery();
            if (rs3.next()) {
                rowdue = rs3.getInt(1);
            }

            String paid = "";
            pr = new Object[rowpr + rowsd + 7][col2];
            System.out.println("row count11 " + rowsd);
            //pr = new Object[rowsd*2][col2];
            psmnt = con.prepareStatement("select roll_number as 'ROLL NUMBER', enrollment_number as 'ENROLLMENT NUMBER', concat(first_name,' ', middle_name,' ', last_name) as 'NAME', gender as 'GENDER', dob as 'DATE OF BIRTH', father_name as 'FATHER NAME', mother_name as 'MOTHER NAME', bloodgroup as 'BLOOD GROUP', marital_status as 'MARITAL STATUS', religion as 'RELIGION', cast as 'CASTE', nationality as 'NATIONALITY', course as 'COURSE', branch as 'BRANCH', semester as 'SEMESTER', session as 'SESSION' from student_details " + selection + "");
            ResultSet rssd = psmnt.executeQuery();


            String data = txt_search.getText().trim();
            int k = 0;
            int s = 0;
            int j = 0;
            while (rssd.next()) {
                for (int i = 1; i <= 1; i++, k++) {
                    for (j = 1; j <= col2; j++) {
                        pr[k][j - 1] = rssd.getString(j);
                    }
                    k = k + 2;
                    data = rssd.getString(1);
                    psmnt = con.prepareStatement("select 'Reciept Number','Date of Payment','Tution Fee','Hostel Fee','Mess Fee','Exam Fee','Uniforma Charge','Bus Fare','Other Fee','Total Amount','Paid Amount'");
                    ResultSet rsrpheader = psmnt.executeQuery();
                    while (rsrpheader.next()) {
                        for (int x = 0; x < 1; x++) {
                            for (int y = 1; y <= 11; y++) {
                                pr[k][y - 1] = rsrpheader.getString(y);
                            }
                            k++;

                        }
                    }

                    psmnt = con.prepareStatement("select sum(amount) from pay_report where rollno = '" + data + "'");
                    ResultSet rspaid = psmnt.executeQuery();
                    while (rspaid.next()) {
                        paid = rspaid.getString(1);
                    }
                    psmnt = con.prepareStatement("select rcpno, rdate, tutionfee, hostelfee, messfee, examfee, uniformcharge, busfare, other, amount, '" + paid + "' from pay_report where rollno = '" + data + "'");
                    ResultSet rsrp = psmnt.executeQuery();
                    while (rsrp.next()) {
                        for (int m = 0; m < 1; m++) {
                            for (int n = 1; n <= 11; n++) {
                                pr[k][n - 1] = rsrp.getString(n);
                            }
                            k++;

                        }
                    }
                    k = k + 2;
                    psmnt = con.prepareStatement("select 'Tution Fee Due','Hostel Fee Due','Mess Fee Due','Exam Fee Due','Uniforma Charge Due','Bus Fare Due','Other Fee Due','Total Amount Due'");
                    ResultSet rsdueheader = psmnt.executeQuery();
                    while (rsdueheader.next()) {
                        for (int x = 0; x < 1; x++) {
                            for (int y = 1; y <= 8; y++) {
                                pr[k][y - 1] = rsdueheader.getString(y);
                            }
                            k++;

                        }
                    }

                    psmnt = con.prepareStatement("select tdue, hdue, mdue, edue, udue, bdue, odue, totaldue from due  where roll_number = '" + data + "'");
                    ResultSet rsdue = psmnt.executeQuery();
                    while (rsdue.next()) {
                        for (int x = 0; x < 1; x++) {
                            for (int y = 1; y <= 8; y++) {
                                pr[k][y - 1] = rsdue.getString(y);
                            }
                            k++;

                        }
                    }
                }
            }


            jTable_Report.setModel(new DefaultTableModel(pr, colname1));
            Coloumnautosizer.sizeColumnsToFit(jTable_Report);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void retdd() {
        try {
            con = Util.getConnection();
            psmnt = con.prepareStatement("select student_details.roll_number as 'ROLL NUMBER', student_details.enrollment_number as 'ENROLLMENT NO', concat(student_details.first_name,' ', student_details.middle_name,' ', student_details.last_name) as 'NAME',  student_details.course as 'COURSE', student_details.branch as 'BRANCH',due.tdue as 'TUTION DUE', due.hdue as 'HOSTEL DUE', due.mdue as 'MESS DUE', due.edue as 'EXAM DUE', due.bdue as 'BUSFARE DUE', due.udue as 'UNIFORMs DUE', due.odue as 'OTHERs DUE', due.totaldue as 'TOTAL DUE'  from due  join student_details on student_details.roll_number = due.roll_number where student_details.session='" + txt_search.getText() + "' and student_details.branch = '" + cmbBranch.getSelectedItem().toString() + "'");
            rs = psmnt.executeQuery();
            jTable_Report.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            Coloumnautosizer.sizeColumnsToFit(jTable_Report);
            rs.close();
            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void columnSelection() {
        int swoption = cmb_SearchWise.getSelectedIndex();
        switch (swoption) {
            case 0:

                break;
            case 1:
                selection = " where student_details.roll_number = '" + txt_search.getText() + "'";
                break;
            case 2:
                selection = "where student_details.enrollment_number ='" + txt_search.getText() + "'";
                break;
            case 3:
                selection = "where student_details.first_name ='" + txt_search.getText() + "'";
                break;
            case 4:
                selection = "where student_details.middle_name ='" + txt_search.getText() + "'";
                break;
            case 5:
                selection = "where student_details.last_name ='" + txt_search.getText() + "'";
                break;

        }
    }

    public void colSelection() {
        int swoption = cmb_SearchWise.getSelectedIndex();
        switch (swoption) {
            case 0:

                break;
            case 1:
                selection = " where student_details.roll_number like '" + txt_search.getText() + "%'";
                break;
            case 2:
                selection = "where student_details.enrollment_number like '" + txt_search.getText() + "%'";
                break;
            case 3:
                selection = "where student_details.first_name like '" + txt_search.getText() + "%'";
                break;
            case 4:
                selection = "where student_details.middle_name like '" + txt_search.getText() + "%'";
                break;
            case 5:
                selection = "where student_details.last_name like '" + txt_search.getText() + "%'";
                break;
            case 6:
                selection = "where student_details.branch = '" + cmbBranch.getSelectedItem().toString() + "'";
                break;

        }
    }

    public void paySelection() {
        int swoption = cmb_SearchWise.getSelectedIndex();
        switch (swoption) {
            case 0:

                break;
            case 1:
                selection = " where roll_number = '" + txt_search.getText() + "'";
                break;
            case 2:
                selection = "where enrollment_number = '" + txt_search.getText() + "'";
                break;
            case 3:
                selection = "where first_name = '" + txt_search.getText() + "'";
                break;
            case 4:
                selection = "where middle_name = '" + txt_search.getText() + "'";
                break;
            case 5:
                selection = "where last_name = '" + txt_search.getText() + "'";
                break;


        }
    }

    public void retrieveCourse() {
        ArrayList course = new ArrayList();
        cmbCourse.removeAllItems();
        try {
            con = Util.getConnection();
            psmnt = con.prepareStatement("select course from course");
            rs = psmnt.executeQuery();
            while (rs.next()) {
                course.add(rs.getString(1));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        for (int i = 0; i < course.size(); i++) {
            cmbCourse.addItem(course.get(i));
        }
    }

    public void retrieveBranch() {
        ArrayList course = new ArrayList();
        cmbBranch.removeAllItems();
        Object obj = cmbCourse.getSelectedItem();
        if (obj != null) {
            try {
                con = Util.getConnection();
                psmnt = con.prepareStatement("select branch from branch where course ='" + cmbCourse.getSelectedItem().toString() + "'");
                rs = psmnt.executeQuery();
                while (rs.next()) {
                    course.add(rs.getString(1));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            for (int i = 0; i < course.size(); i++) {
                cmbBranch.addItem(course.get(i));
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox cmbBranch;
    private javax.swing.JComboBox cmbCourse;
    private javax.swing.JComboBox cmb_SearchWise;
    private javax.swing.JComboBox cmb_search;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Report;
    private javax.swing.JLabel lblbranch;
    private javax.swing.JLabel lblcourse;
    private javax.swing.JLabel lbls;
    private javax.swing.JLabel lblsw;
    private javax.swing.JTextField txt_search;
    // End of variables declaration//GEN-END:variables

    @Override
    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
